{"ast":null,"code":"import { LABEL_PADDING_HORIZONTAL, ADORNMENT_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from \"./constants\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nexport var calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var customHeight = height > 0 ? height : 0;\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\nexport var calculateInputHeight = function calculateInputHeight(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var minHeight = arguments.length > 2 ? arguments[2] : undefined;\n  var finalHeight = height > 0 ? height : labelHeight;\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\nexport var calculatePadding = function calculatePadding(props) {\n  var height = props.height,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline;\n  var result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nvar calculateTextAreaPadding = function calculateTextAreaPadding(props) {\n  var dense = props.dense;\n  return dense ? 10 : 20;\n};\n\nvar calculateInputPadding = function calculateInputPadding(_ref) {\n  var topPosition = _ref.topPosition,\n      fontSize = _ref.fontSize,\n      multiline = _ref.multiline,\n      scale = _ref.scale,\n      dense = _ref.dense,\n      offset = _ref.offset,\n      isAndroid = _ref.isAndroid;\n  var refFontSize = scale * fontSize;\n  var result = Math.floor(topPosition / 2);\n  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);\n  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);\n  return result;\n};\n\nexport var adjustPaddingOut = function adjustPaddingOut(_ref2) {\n  var pad = _ref2.pad,\n      multiline = _ref2.multiline,\n      label = _ref2.label,\n      scale = _ref2.scale,\n      height = _ref2.height,\n      fontSize = _ref2.fontSize,\n      lineHeight = _ref2.lineHeight,\n      dense = _ref2.dense,\n      offset = _ref2.offset,\n      isAndroid = _ref2.isAndroid;\n  var fontHeight = lineHeight !== null && lineHeight !== void 0 ? lineHeight : fontSize;\n  var refFontHeight = scale * fontSize;\n  var result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2)\n    };\n  }\n\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n\n    if (!dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n\n    result = Math.floor(result);\n  }\n\n  return {\n    paddingTop: result,\n    paddingBottom: result\n  };\n};\nexport var adjustPaddingFlat = function adjustPaddingFlat(_ref3) {\n  var pad = _ref3.pad,\n      scale = _ref3.scale,\n      multiline = _ref3.multiline,\n      label = _ref3.label,\n      height = _ref3.height,\n      offset = _ref3.offset,\n      dense = _ref3.dense,\n      fontSize = _ref3.fontSize,\n      isAndroid = _ref3.isAndroid,\n      styles = _ref3.styles;\n  var result = pad;\n  var topResult = result;\n  var bottomResult = result;\n  var paddingTop = styles.paddingTop,\n      paddingBottom = styles.paddingBottom;\n  var refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    if (label) {\n      return {\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom\n      };\n    }\n\n    return {\n      paddingTop: result,\n      paddingBottom: result\n    };\n  }\n\n  if (label) {\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    if (!isAndroid) {\n      if (dense) {\n        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;\n      }\n\n      if (!dense) {\n        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2)\n      };\n    }\n\n    if (!isAndroid) {\n      if (dense) {\n        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);\n      }\n\n      if (!dense) {\n        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult)\n  };\n};\nexport var interpolatePlaceholder = function interpolatePlaceholder(labeled, hasActiveOutline) {\n  return labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1]\n  });\n};\nexport function calculateFlatAffixTopPosition(_ref4) {\n  var height = _ref4.height,\n      paddingTop = _ref4.paddingTop,\n      paddingBottom = _ref4.paddingBottom,\n      affixHeight = _ref4.affixHeight;\n  var inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n  var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\nexport function calculateOutlinedIconAndAffixTopPosition(_ref5) {\n  var height = _ref5.height,\n      affixHeight = _ref5.affixHeight,\n      labelYOffset = _ref5.labelYOffset;\n  return (height - affixHeight + labelYOffset) / 2;\n}\nexport var calculateFlatInputHorizontalPadding = function calculateFlatInputHorizontalPadding(_ref6) {\n  var adornmentConfig = _ref6.adornmentConfig;\n  var paddingLeft = LABEL_PADDING_HORIZONTAL;\n  var paddingRight = LABEL_PADDING_HORIZONTAL;\n  adornmentConfig.forEach(function (_ref7) {\n    var type = _ref7.type,\n        side = _ref7.side;\n\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n  return {\n    paddingLeft: paddingLeft,\n    paddingRight: paddingRight\n  };\n};\nexport function areLabelsEqual(label1, label2) {\n  if (label1 === label2) {\n    return true;\n  }\n\n  if (!(label1 || label2)) {\n    return true;\n  }\n\n  if (!(label1 && label2)) {\n    return false;\n  }\n\n  if (typeof label1 !== typeof label2) {\n    return false;\n  }\n\n  if (typeof label1 === 'string' || label1 instanceof String || typeof label2 === 'string' || label2 instanceof String) {\n    return false;\n  }\n\n  if (label1.type !== label2.type) {\n    return false;\n  }\n\n  var label1Props = label1.props || {};\n  var label2Props = label2.props || {};\n\n  if (JSON.stringify(label1Props) !== JSON.stringify(label2Props)) {\n    return false;\n  }\n\n  if (!(label1Props.children || label2Props.children)) {\n    return true;\n  }\n\n  if (!(label1Props.children && label2Props.children)) {\n    return false;\n  }\n\n  var label1IsArray = Array.isArray(label1Props.children);\n  var label2IsArray = Array.isArray(label2Props.children);\n\n  if (label1IsArray && label2IsArray) {\n    var children1 = label1Props.children;\n    var children2 = label2Props.children;\n\n    if (children1.length !== children2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < children1.length; i++) {\n      if (!areLabelsEqual(children1[i], children2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (label1IsArray || label2IsArray) {\n    return false;\n  }\n\n  return areLabelsEqual(label1Props.children, label2Props.children);\n}","map":{"version":3,"sources":["helpers.tsx"],"names":["calculateLabelTopPosition","height","optionalPadding","customHeight","Math","calculateInputHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","dense","isAndroid","refFontSize","scale","topPosition","offset","adjustPaddingOut","fontHeight","lineHeight","refFontHeight","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","fontSize","interpolatePlaceholder","inputRange","outputRange","hasActiveOutline","affixHeight","inputHeightWithoutPadding","halfOfTheInputHeightDecreasedByAffixHeight","labelYOffset","calculateFlatInputHorizontalPadding","adornmentConfig","paddingLeft","paddingRight","side","type","AdornmentType","AdornmentSide","ADORNMENT_SIZE","label1","label2","label1Props","label2Props","JSON","label1IsArray","Array","label2IsArray","children1","children2","i","areLabelsEqual"],"mappings":"AAEA,SAAA,wBAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,iBAAA;AAMA,SAAA,aAAA,EAAA,aAAA;AAwBA,OAAO,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAA,WAAA,EAI5B;EAAA,IAFXC,MAEW,uEAJ4B,CAI5B;EAAA,IADXC,eACW,uEAJ4B,CAI5B;EACX,IAAMC,YAAY,GAAGF,MAAM,GAANA,CAAAA,GAAAA,MAAAA,GAArB,CAAA;EAEA,OAAOG,IAAI,CAAJA,KAAAA,CAAW,CAACD,YAAY,GAAb,WAAA,IAAA,CAAA,GAAlB,eAAOC,CAAP;AAPK,CAAA;AAUP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,WAAA,EAIvB;EAAA,IAFXJ,MAEW,uEAJuB,CAIvB;EAAA,IAJuB,SAIvB;EACX,IAAMK,WAAW,GAAGL,MAAM,GAANA,CAAAA,GAAAA,MAAAA,GAApB,WAAA;EAEA,IAAIA,MAAM,GAAV,CAAA,EAAgB,OAAA,MAAA;EAChB,OAAOK,WAAW,GAAXA,SAAAA,GAAAA,SAAAA,GAAP,WAAA;AARK,CAAA;AAWP,OAAO,IAAMC,gBAAgB,GAAIC,SAApBD,gBAAoBC,CAAAA,KAAD,EAAiC;EAC/D,IAAM,MAAN,GAAA,KAAA,CAAM,MAAN;EAAA,uBAAA,KAAA,CAAgBC,SAAhB;EAAA,IAAgBA,SAAhB,iCAA4B,KAA5B;EAEA,IAAIC,MAAM,GAAV,CAAA;;EAEA,IAAA,SAAA,EAAe;IACb,IAAIT,MAAM,IAAV,SAAA,EAAyB;MACvBS,MAAM,GAAGC,wBAAwB,CAAjCD,KAAiC,CAAjCA;IADF,CAAA,MAEO;MACLA,MAAM,GAAGE,qBAAqB,CAA9BF,KAA8B,CAA9BA;IACD;EACF;;EAED,OAAON,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAP,MAAOA,CAAP;AAbK,CAAA;;AAgBP,IAAMO,wBAAwB,GAAIH,SAA5BG,wBAA4BH,CAAAA,KAAD,EAAyB;EACxD,IAAQK,KAAR,GAAA,KAAA,CAAQA,KAAR;EAEA,OAAOA,KAAK,GAAA,EAAA,GAAZ,EAAA;AAHF,CAAA;;AAMA,IAAMD,qBAAqB,GAAG,SAAxBA,qBAAwB,OAQF;EAAA,IARG,WAQH,QARG,WAQH;EAAA,IARG,QAQH,QARG,QAQH;EAAA,IARG,SAQH,QARG,SAQH;EAAA,IARG,KAQH,QARG,KAQH;EAAA,IARG,KAQH,QARG,KAQH;EAAA,IARG,MAQH,QARG,MAQH;EAAA,IAD1BE,SAC0B,QAD1BA,SAC0B;EAC1B,IAAMC,WAAW,GAAGC,KAAK,GAAzB,QAAA;EACA,IAAIN,MAAM,GAAGN,IAAI,CAAJA,KAAAA,CAAWa,WAAW,GAAnC,CAAab,CAAb;EAEAM,MAAM,GACJA,MAAM,GACNN,IAAI,CAAJA,KAAAA,CAAW,CAACW,WAAW,GAAZ,QAAA,IADXL,CACAN,CADAM,IAECM,KAAK,GAALA,CAAAA,GAAYE,MAAM,GAAlBF,CAAAA,GAHHN,CACEA,CADFA;EAKA,IAAID,SAAS,IAAb,SAAA,EACEC,MAAM,GAAGN,IAAI,CAAJA,GAAAA,CAASS,KAAK,GAAGK,MAAM,GAAT,CAAA,GAAdd,MAAAA,EAATM,MAASN,CAATM;EAEF,OAAA,MAAA;AApBF,CAAA;;AAuBA,OAAO,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,QAWP;EAAA,IAXQ,GAWR,SAXQ,GAWR;EAAA,IAXQ,SAWR,SAXQ,SAWR;EAAA,IAXQ,KAWR,SAXQ,KAWR;EAAA,IAXQ,KAWR,SAXQ,KAWR;EAAA,IAXQ,MAWR,SAXQ,MAWR;EAAA,IAXQ,QAWR,SAXQ,QAWR;EAAA,IAXQ,UAWR,SAXQ,UAWR;EAAA,IAXQ,KAWR,SAXQ,KAWR;EAAA,IAXQ,MAWR,SAXQ,MAWR;EAAA,IADvBL,SACuB,SADvBA,SACuB;EACvB,IAAMM,UAAU,GAAGC,UAAH,KAAA,IAAGA,IAAAA,UAAH,KAAA,KAAA,CAAGA,GAAH,UAAGA,GAAnB,QAAA;EACA,IAAMC,aAAa,GAAGN,KAAK,GAA3B,QAAA;EACA,IAAIN,MAAM,GAAV,GAAA;;EAEA,IAAIT,MAAM,IAAI,CAAd,SAAA,EAA0B;IACxB,OAAO;MACLsB,UAAU,EAAEnB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,CAACH,MAAM,GAAP,UAAA,IADnB,CACOG,CADP;MAELoB,aAAa,EAAEpB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,CAACH,MAAM,GAAP,UAAA,IAAZG,CAAAA;IAFV,CAAP;EAID;;EACD,IAAI,CAAA,SAAA,IAAJ,SAAA,EAA6B;IAC3B,IAAA,KAAA,EAAW;MACT,IAAA,KAAA,EAAW;QACTM,MAAM,IAAIM,KAAK,GAALA,CAAAA,GAAYZ,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAkBkB,aAAa,GAAd,CAACA,GAA9BN,KAAYZ,CAAZY,GAAVN,CAAAA;MADF,CAAA,MAEO;QACLA,MAAM,IAANA,CAAAA;MACD;IACF;;IACD,IAAI,CAAJ,KAAA,EAAY;MACV,IAAA,KAAA,EAAW;QACTA,MAAM,IACJM,KAAK,GAALA,CAAAA,GACIZ,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAiBkB,aAAa,GADlCN,KACIZ,CADJY,GAEIZ,IAAI,CAAJA,GAAAA,CAASc,MAAM,GAAfd,CAAAA,EAAqBkB,aAAa,GAHxCZ,KAGMN,CAHNM;MADF,CAAA,MAKO;QACLA,MAAM,IAAIM,KAAK,GAALA,CAAAA,GAAYZ,IAAI,CAAJA,GAAAA,CAASc,MAAM,GAAfd,CAAAA,EAAqBkB,aAAa,GAA9CN,KAAYZ,CAAZY,GAAVN,CAAAA;MACD;IACF;;IACDA,MAAM,GAAGN,IAAI,CAAJA,KAAAA,CAATM,MAASN,CAATM;EACD;;EACD,OAAO;IAAEa,UAAU,EAAZ,MAAA;IAAsBC,aAAa,EAAEd;EAArC,CAAP;AA1CK,CAAA;AA6CP,OAAO,IAAMe,iBAAiB,GAAG,SAApBA,iBAAoB,QAWR;EAAA,IAXS,GAWT,SAXS,GAWT;EAAA,IAXS,KAWT,SAXS,KAWT;EAAA,IAXS,SAWT,SAXS,SAWT;EAAA,IAXS,KAWT,SAXS,KAWT;EAAA,IAXS,MAWT,SAXS,MAWT;EAAA,IAXS,MAWT,SAXS,MAWT;EAAA,IAXS,KAWT,SAXS,KAWT;EAAA,IAXS,QAWT,SAXS,QAWT;EAAA,IAXS,SAWT,SAXS,SAWT;EAAA,IADvBC,MACuB,SADvBA,MACuB;EACvB,IAAIhB,MAAM,GAAV,GAAA;EACA,IAAIiB,SAAS,GAAb,MAAA;EACA,IAAIC,YAAY,GAAhB,MAAA;EACA,IAAM,UAAN,GAAA,MAAA,CAAM,UAAN;EAAA,IAAoBJ,aAApB,GAAA,MAAA,CAAoBA,aAApB;EACA,IAAMT,WAAW,GAAGC,KAAK,GAAzB,QAAA;;EAEA,IAAI,CAAJ,SAAA,EAAgB;IAEd,IAAA,KAAA,EAAW;MAET,OAAO;QAAEO,UAAF,EAAEA,UAAF;QAAcC,aAAAA,EAAAA;MAAd,CAAP;IAJY;;IAOd,OAAO;MAAED,UAAU,EAAZ,MAAA;MAAsBC,aAAa,EAAEd;IAArC,CAAP;EACD;;EAED,IAAA,KAAA,EAAW;IAETiB,SAAS,GAATA,UAAAA;IACAC,YAAY,GAHH,aAGTA;;IAGA,IAAI,CAAJ,SAAA,EAAgB;MACd,IAAA,KAAA,EAAW;QACTD,SAAS,IACPX,KAAK,GAALA,CAAAA,GACIZ,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAiBW,WAAW,GAA5BX,KAAAA,IAAwCM,MAAM,GADlDM,CAAAA,GAEIZ,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAiBW,WAAW,GAA5BX,KAAAA,IAAwCM,MAAM,GAHpDiB,CAAAA;MAID;;MACD,IAAI,CAAJ,KAAA,EAAY;QACVA,SAAS,IACPX,KAAK,GAALA,CAAAA,GACIZ,IAAI,CAAJA,GAAAA,CAASc,MAAM,GAAfd,CAAAA,EAAqBW,WAAW,GADpCC,KACIZ,CADJY,GAEIZ,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAiBW,WAAW,GAA5BX,KAAAA,IAAwCc,MAAM,GAHpDS,CAAAA;MAID;IACF;;IACDA,SAAS,GAAGvB,IAAI,CAAJA,KAAAA,CAAZuB,SAAYvB,CAAZuB;EApBF,CAAA,MAqBO;IACL,IAAA,MAAA,EAAY;MAEV,OAAO;QACLJ,UAAU,EAAEnB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,CAACH,MAAM,GAAP,QAAA,IADnB,CACOG,CADP;QAELoB,aAAa,EAAEpB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAY,CAACH,MAAM,GAAP,QAAA,IAAZG,CAAAA;MAFV,CAAP;IAHG;;IASL,IAAI,CAAJ,SAAA,EAAgB;MACd,IAAA,KAAA,EAAW;QACTM,MAAM,IACJM,KAAK,GAALA,CAAAA,GACIZ,IAAI,CAAJA,GAAAA,CAASc,MAAM,GAAfd,CAAAA,EAAsByB,QAAQ,GAAT,CAACA,GAD1Bb,KACIZ,CADJY,GAEIZ,IAAI,CAAJA,GAAAA,CAASc,MAAM,GAAfd,CAAAA,EAHNM,KAGMN,CAHNM;MAID;;MACD,IAAI,CAAJ,KAAA,EAAY;QACVA,MAAM,IACJM,KAAK,GAALA,CAAAA,GACIZ,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAiByB,QAAQ,GAD7Bb,KACIZ,CADJY,GAEIZ,IAAI,CAAJA,GAAAA,CAAAA,QAAAA,EAAoBc,MAAM,GAAP,CAACA,GAH1BR,KAGMN,CAHNM;MAID;;MAEDA,MAAM,GAAGN,IAAI,CAAJA,KAAAA,CAATM,MAASN,CAATM;MACAiB,SAAS,GAATA,MAAAA;MACAC,YAAY,GAAZA,MAAAA;IACD;EACF;;EAED,OAAO;IACLL,UAAU,EAAEnB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EADP,SACOA,CADP;IAELoB,aAAa,EAAEpB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAAA,YAAAA;EAFV,CAAP;AA9EK,CAAA;AAoFP,OAAO,IAAM0B,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,OAAA,EAAA,gBAAA;EAAA,OAIpC,OAAO,CAAP,WAAA,CAAoB;IAClBC,UAAU,EAAE,CAAA,CAAA,EADM,CACN,CADM;IAElBC,WAAW,EAAE,CAACC,gBAAgB,GAAA,CAAA,GAAjB,CAAA,EAAA,CAAA;EAFK,CAApB,CAJoC;AAAA,CAA/B;AASP,OAAO,SAAA,6BAAA,QAUI;EAAA,IAVmC,MAUnC,SAVmC,MAUnC;EAAA,IAVmC,UAUnC,SAVmC,UAUnC;EAAA,IAVmC,aAUnC,SAVmC,aAUnC;EAAA,IANTC,WAMS,SANTA,WAMS;EACT,IAAMC,yBAAyB,GAAGlC,MAAM,GAANA,UAAAA,GAAlC,aAAA;EAEA,IAAMmC,0CAA0C,GAC9C,CAACD,yBAAyB,GAA1B,WAAA,IADF,CAAA;EAGA,OAAOZ,UAAU,GAAjB,0CAAA;AACD;AAED,OAAO,SAAA,wCAAA,QAQI;EAAA,IAR8C,MAQ9C,SAR8C,MAQ9C;EAAA,IAR8C,WAQ9C,SAR8C,WAQ9C;EAAA,IALTc,YAKS,SALTA,YAKS;EACT,OAAO,CAACpC,MAAM,GAANA,WAAAA,GAAD,YAAA,IAAP,CAAA;AACD;AAED,OAAO,IAAMqC,mCAAmC,GAAG,SAAtCA,mCAAsC,QAI7C;EAAA,IAHJC,eAGI,SAHJA,eAGI;EACJ,IAAIC,WAAW,GAAf,wBAAA;EACA,IAAIC,YAAY,GAAhB,wBAAA;EAEAF,eAAe,CAAfA,OAAAA,CAAwB,iBAAoB;IAAA,IAAnB,IAAmB,SAAnB,IAAmB;IAAA,IAAXG,IAAW,SAAXA,IAAW;;IAC1C,IAAIC,IAAI,KAAKC,aAAa,CAAtBD,IAAAA,IAA+BD,IAAI,KAAKG,aAAa,CAAzD,IAAA,EAAgE;MAC9DL,WAAW,GAAGM,cAAc,GAAdA,gBAAAA,GAAdN,iBAAAA;IADF,CAAA,MAEO,IAAIE,IAAI,KAAKG,aAAa,CAA1B,KAAA,EAAkC;MACvC,IAAIF,IAAI,KAAKC,aAAa,CAA1B,KAAA,EAAkC;QAChCH,YAAY,GAAGK,cAAc,GAAdA,gBAAAA,GAAfL,iBAAAA;MADF,CAAA,MAEO,IAAIE,IAAI,KAAKC,aAAa,CAA1B,IAAA,EAAiC;QACtCH,YAAY,GAAGK,cAAc,GAAdA,gBAAAA,GAAfL,iBAAAA;MACD;IACF;EATHF,CAAAA;EAYA,OAAO;IAAEC,WAAF,EAAEA,WAAF;IAAeC,YAAAA,EAAAA;EAAf,CAAP;AApBK,CAAA;AAuBP,OAAO,SAAA,cAAA,CAAA,MAAA,EAAA,MAAA,EAGI;EACT,IAAIM,MAAM,KAAV,MAAA,EAAuB;IAErB,OAAA,IAAA;EAHO;;EAOT,IAAI,EAAEA,MAAM,IAAZ,MAAI,CAAJ,EAAyB;IACvB,OAAA,IAAA;EARO;;EAaT,IAAI,EAAEA,MAAM,IAAZ,MAAI,CAAJ,EAAyB;IACvB,OAAA,KAAA;EAdO;;EAmBT,IAAI,OAAA,MAAA,KAAkB,OAAtB,MAAA,EAAqC;IACnC,OAAA,KAAA;EApBO;;EAwBT,IACE,OAAA,MAAA,KAAA,QAAA,IACAA,MAAM,YADN,MAAA,IAGA,OAAA,MAAA,KAHA,QAAA,IAIAC,MAAM,YALR,MAAA,EAME;IAGA,OAAA,KAAA;EAjCO;;EAqCT,IAAID,MAAM,CAANA,IAAAA,KAAgBC,MAAM,CAA1B,IAAA,EAAiC;IAC/B,OAAA,KAAA;EAtCO;;EA0CT,IAAMC,WAAW,GAAGF,MAAM,CAANA,KAAAA,IAApB,EAAA;EACA,IAAMG,WAAW,GAAGF,MAAM,CAANA,KAAAA,IAApB,EAAA;;EACA,IAAIG,IAAI,CAAJA,SAAAA,CAAAA,WAAAA,MAAgCA,IAAI,CAAJA,SAAAA,CAApC,WAAoCA,CAApC,EAAiE;IAC/D,OAAA,KAAA;EA7CO;;EAkDT,IAAI,EAAEF,WAAW,CAAXA,QAAAA,IAAwBC,WAAW,CAAzC,QAAI,CAAJ,EAAqD;IACnD,OADmD,IACnD;EAnDO;;EAuDT,IAAI,EAAED,WAAW,CAAXA,QAAAA,IAAwBC,WAAW,CAAzC,QAAI,CAAJ,EAAqD;IACnD,OAAA,KAAA;EAxDO;;EA6DT,IAAME,aAAa,GAAGC,KAAK,CAALA,OAAAA,CAAcJ,WAAW,CAA/C,QAAsBI,CAAtB;EACA,IAAMC,aAAa,GAAGD,KAAK,CAALA,OAAAA,CAAcH,WAAW,CAA/C,QAAsBG,CAAtB;;EACA,IAAID,aAAa,IAAjB,aAAA,EAAoC;IAClC,IAAMG,SAAS,GAAGN,WAAW,CAA7B,QAAA;IACA,IAAMO,SAAS,GAAGN,WAAW,CAA7B,QAAA;;IACA,IAAIK,SAAS,CAATA,MAAAA,KAAqBC,SAAS,CAAlC,MAAA,EAA2C;MACzC,OADyC,KACzC;IAJgC;;IAQlC,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,SAAS,CAA7B,MAAA,EAAsCE,CAAtC,EAAA,EAA2C;MACzC,IAAI,CAACC,cAAc,CAACH,SAAS,CAAV,CAAU,CAAV,EAAeC,SAAS,CAA3C,CAA2C,CAAxB,CAAnB,EAAiD;QAC/C,OAAA,KAAA;MACD;IACF;;IAED,OAAA,IAAA;EA7EO;;EAiFT,IAAIJ,aAAa,IAAjB,aAAA,EAAoC;IAClC,OAAA,KAAA;EAlFO;;EAsFT,OAAOM,cAAc,CAACT,WAAW,CAAZ,QAAA,EAAuBC,WAAW,CAAvD,QAAqB,CAArB;AACD","sourcesContent":["import type { Animated } from 'react-native';\nimport type { AdornmentConfig } from './Adornment/types';\nimport {\n  LABEL_PADDING_HORIZONTAL,\n  ADORNMENT_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport type { TextInputLabelProp } from './types';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  lineHeight?: number;\n  label?: TextInputLabelProp | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  lineHeight,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const fontHeight = lineHeight ?? fontSize;\n  const refFontHeight = scale * fontSize;\n  let result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontHeight / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontHeight * scale)\n            : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport const interpolatePlaceholder = (\n  labeled: Animated.Value,\n  hasActiveOutline: boolean | undefined\n) =>\n  labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1],\n  });\n\nexport function calculateFlatAffixTopPosition({\n  height,\n  paddingTop,\n  paddingBottom,\n  affixHeight,\n}: {\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  affixHeight: number;\n}): number {\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n\n  const halfOfTheInputHeightDecreasedByAffixHeight =\n    (inputHeightWithoutPadding - affixHeight) / 2;\n\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\n\nexport function calculateOutlinedIconAndAffixTopPosition({\n  height,\n  affixHeight,\n  labelYOffset,\n}: {\n  height: number;\n  affixHeight: number;\n  labelYOffset: number;\n}): number {\n  return (height - affixHeight + labelYOffset) / 2;\n}\n\nexport const calculateFlatInputHorizontalPadding = ({\n  adornmentConfig,\n}: {\n  adornmentConfig: AdornmentConfig[];\n}) => {\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n\n  adornmentConfig.forEach(({ type, side }) => {\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n\n  return { paddingLeft, paddingRight };\n};\n\nexport function areLabelsEqual(\n  label1?: TextInputLabelProp,\n  label2?: TextInputLabelProp\n): boolean {\n  if (label1 === label2) {\n    // will also take care of equality for `string` type, or if both are undefined.\n    return true;\n  }\n\n  // Return true if both of them are falsy.\n  if (!(label1 || label2)) {\n    return true;\n  }\n\n  // At this point, both of them cannot be false.\n  // So, return false if any of them is falsy.\n  if (!(label1 && label2)) {\n    return false;\n  }\n\n  // At this point, both of them has to be truthy.\n  // So, return false if they are not of the same type.\n  if (typeof label1 !== typeof label2) {\n    return false;\n  }\n\n  // At this point, both of them has to be of the same datatype.\n  if (\n    typeof label1 === 'string' ||\n    label1 instanceof String ||\n    // These last two OR checks are only here for Typescript's sake.\n    typeof label2 === 'string' ||\n    label2 instanceof String\n  ) {\n    // They're strings, so they won't be equal; otherwise\n    //  we would have returned 'true' earlier.\n    return false;\n  }\n\n  // At this point, both of them has to be of the datatype: `React.ReactElement`.\n  if (label1.type !== label2.type) {\n    return false;\n  }\n\n  // Preliminary equality check: do they stringify to the same string?\n  const label1Props = label1.props || {};\n  const label2Props = label2.props || {};\n  if (JSON.stringify(label1Props) !== JSON.stringify(label2Props)) {\n    return false;\n  }\n\n  // We now know they stringify to the same string.\n  // Return true if both of them DO NOT have children\n  if (!(label1Props.children || label2Props.children)) {\n    return true; // since there's nothing else to check\n  }\n\n  // Return false if only one of them has children\n  if (!(label1Props.children && label2Props.children)) {\n    return false;\n  }\n\n  // Both have children...\n  // Handle for when both the children are arrays\n  const label1IsArray = Array.isArray(label1Props.children);\n  const label2IsArray = Array.isArray(label2Props.children);\n  if (label1IsArray && label2IsArray) {\n    const children1 = label1Props.children as any[];\n    const children2 = label2Props.children as any[];\n    if (children1.length !== children2.length) {\n      return false; // no point proceeding\n    }\n\n    // all the children must also be equal\n    for (let i = 0; i < children1.length; i++) {\n      if (!areLabelsEqual(children1[i], children2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Only one of them can be an array at this point. If any is array, return false\n  if (label1IsArray || label2IsArray) {\n    return false;\n  }\n\n  // both children are not arrays, so recur.\n  return areLabelsEqual(label1Props.children, label2Props.children);\n}\n"]},"metadata":{},"sourceType":"module"}